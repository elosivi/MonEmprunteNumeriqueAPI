package com.aubay.men.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PrestationProfilAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrestationProfilAllPropertiesEquals(PrestationProfil expected, PrestationProfil actual) {
        assertPrestationProfilAutoGeneratedPropertiesEquals(expected, actual);
        assertPrestationProfilAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrestationProfilAllUpdatablePropertiesEquals(PrestationProfil expected, PrestationProfil actual) {
        assertPrestationProfilUpdatableFieldsEquals(expected, actual);
        assertPrestationProfilUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrestationProfilAutoGeneratedPropertiesEquals(PrestationProfil expected, PrestationProfil actual) {
        assertThat(expected)
            .as("Verify PrestationProfil auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrestationProfilUpdatableFieldsEquals(PrestationProfil expected, PrestationProfil actual) {
        assertThat(expected)
            .as("Verify PrestationProfil relevant properties")
            .satisfies(e -> assertThat(e.getNbMoisPresta()).as("check nbMoisPresta").isEqualTo(actual.getNbMoisPresta()))
            .satisfies(e -> assertThat(e.getNbSemCongesEstime()).as("check nbSemCongesEstime").isEqualTo(actual.getNbSemCongesEstime()))
            .satisfies(e -> assertThat(e.getDureeHebdo()).as("check dureeHebdo").isEqualTo(actual.getDureeHebdo()))
            .satisfies(e -> assertThat(e.getDureeTeletravail()).as("check dureeTeletravail").isEqualTo(actual.getDureeTeletravail()))
            .satisfies(e -> assertThat(e.getDureeReuAudio()).as("check dureeReuAudio").isEqualTo(actual.getDureeReuAudio()))
            .satisfies(e -> assertThat(e.getDureeReuVisio()).as("check dureeReuVisio").isEqualTo(actual.getDureeReuVisio()))
            .satisfies(e -> assertThat(e.getNbMailsSansPJ()).as("check nbMailsSansPJ").isEqualTo(actual.getNbMailsSansPJ()))
            .satisfies(e -> assertThat(e.getNbMailsAvecPJ()).as("check nbMailsAvecPJ").isEqualTo(actual.getNbMailsAvecPJ()))
            .satisfies(e -> assertThat(e.getVeillePause()).as("check veillePause").isEqualTo(actual.getVeillePause()))
            .satisfies(e -> assertThat(e.getVeilleSoir()).as("check veilleSoir").isEqualTo(actual.getVeilleSoir()))
            .satisfies(e -> assertThat(e.getVeilleWeekend()).as("check veilleWeekend").isEqualTo(actual.getVeilleWeekend()))
            .satisfies(e -> assertThat(e.getNbTerminaux()).as("check nbTerminaux").isEqualTo(actual.getNbTerminaux()))
            .satisfies(e -> assertThat(e.getNbDeplacements()).as("check nbDeplacements").isEqualTo(actual.getNbDeplacements()))
            .satisfies(e -> assertThat(e.getEcMensuelle()).as("check ecMensuelle").isEqualTo(actual.getEcMensuelle()))
            .satisfies(e -> assertThat(e.getEcTotalePreta()).as("check ecTotalePreta").isEqualTo(actual.getEcTotalePreta()))
            .satisfies(e -> assertThat(e.getEcTransportMensuel()).as("check ecTransportMensuel").isEqualTo(actual.getEcTransportMensuel()))
            .satisfies(e -> assertThat(e.getEcFabMateriel()).as("check ecFabMateriel").isEqualTo(actual.getEcFabMateriel()))
            .satisfies(
                e -> assertThat(e.getEcUtilMaterielMensuel()).as("check ecUtilMaterielMensuel").isEqualTo(actual.getEcUtilMaterielMensuel())
            )
            .satisfies(e -> assertThat(e.getEcCommMensuel()).as("check ecCommMensuel").isEqualTo(actual.getEcCommMensuel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrestationProfilUpdatableRelationshipsEquals(PrestationProfil expected, PrestationProfil actual) {
        assertThat(expected)
            .as("Verify PrestationProfil relationships")
            .satisfies(e -> assertThat(e.getProfil()).as("check profil").isEqualTo(actual.getProfil()))
            .satisfies(e -> assertThat(e.getPrestations()).as("check prestations").isEqualTo(actual.getPrestations()));
    }
}
