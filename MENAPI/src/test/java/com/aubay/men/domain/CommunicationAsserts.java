package com.aubay.men.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommunicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationAllPropertiesEquals(Communication expected, Communication actual) {
        assertCommunicationAutoGeneratedPropertiesEquals(expected, actual);
        assertCommunicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationAllUpdatablePropertiesEquals(Communication expected, Communication actual) {
        assertCommunicationUpdatableFieldsEquals(expected, actual);
        assertCommunicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationAutoGeneratedPropertiesEquals(Communication expected, Communication actual) {
        assertThat(expected)
            .as("Verify Communication auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationUpdatableFieldsEquals(Communication expected, Communication actual) {
        assertThat(expected)
            .as("Verify Communication relevant properties")
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getFe()).as("check fe").isEqualTo(actual.getFe()))
            .satisfies(e -> assertThat(e.getFeUnite()).as("check feUnite").isEqualTo(actual.getFeUnite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationUpdatableRelationshipsEquals(Communication expected, Communication actual) {
        assertThat(expected)
            .as("Verify Communication relationships")
            .satisfies(e -> assertThat(e.getUnite()).as("check unite").isEqualTo(actual.getUnite()));
    }
}
